plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common
}

repositories {
    maven { url "https://maven.neoforged.net/releases/" }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionNeoForge")) { transitive = false }
    include "org.bouncycastle:bcpkix-jdk18on:1.81"
    include "org.bouncycastle:bcprov-jdk18on:1.81"
    include "org.bouncycastle:bcutil-jdk18on:1.81"

    // Forge Gradle
    compileOnly("cc.tweaked:cc-tweaked-$minecraft_version-forge-api:$cctVersion")
    runtimeOnly("cc.tweaked:cc-tweaked-$minecraft_version-forge:$cctVersion")

    // Fixes missing deps on Architectury Loom (architectury/architectury-loom#201)
//    forgeRuntimeLibrary "cc.tweaked:cobalt:0.9.6"
//    forgeRuntimeLibrary "com.jcraft:jzlib:1.1.3"
//    forgeRuntimeLibrary "io.netty:netty-codec-http:4.1.82.Final"
//    forgeRuntimeLibrary "io.netty:netty-codec-socks:4.1.82.Final"
//    forgeRuntimeLibrary "io.netty:netty-handler-proxy:4.1.82.Final"
    forgeRuntimeLibrary "org.bouncycastle:bcpkix-jdk18on:1.81"
    forgeRuntimeLibrary "org.bouncycastle:bcprov-jdk18on:1.81"
    forgeRuntimeLibrary "org.bouncycastle:bcutil-jdk18on:1.81"
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set("dev-shadow")
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set(null)
}

jar {
    archiveClassifier.set("dev")
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}